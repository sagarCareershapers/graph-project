// "use client"
// import React, { useCallback } from 'react';
// import {
//     ReactFlow,
//     MiniMap,
//     Controls,
//     Background,
//     useNodesState,
//     useEdgesState,
//     addEdge,
//     Handle
// } from '@xyflow/react';

// import '@xyflow/react/dist/style.css';
// import styles from "./reactflow.module.css"


// const ReactFlowComponent = () => {
//     const initialNodes = [ 
//         { id: '1', position: { x: 100, y: 100 }, data: { label: 'Staging Area Subnet' }, type: 'group', style: { width: 1200, height: 300, border: '1px solid #fff', padding: 10 } },
//         // { id: '1', position: { x: 100, y: 200 }, data: { label: (
//         //     <div>
//         //         Corporate Data Center
//         //         <Handle type="source" position="right" />
//         //         <Handle type="target" position="left" />
//         //     </div>
//         // ) }, type: 'input' },
//         // { id: '2', position: { x: 300, y: 100 }, data: { label: (
//         //     <div>
//         //         App Server (AWS Replication Agent)
//         //         <Handle type="source" position="right" />
//         //         <Handle type="target" position="left" />
//         //     </div>
//         // ) }, style: { border: '1px solid #ff0000', padding: 10 } },
//         // { id: '3', position: { x: 300, y: 300 }, data: { label: (
//         //     <div>
//         //         DB Server (AWS Replication Agent)
//         //         <Handle type="source" position="right" />
//         //         <Handle type="target" position="left" />
//         //     </div>
//         // ) }, style: { border: '1px solid #ff0000', padding: 10 } },
//         // { id: '4', position: { x: 500, y: 200 }, data: { label: (
//         //     <div>
//         //         Replication Server
//         //         <Handle type="source" position="right" />
//         //         <Handle type="target" position="left" />
//         //     </div>
//         // ) }, style: { border: '2px dashed #ff0000', padding: 10 } },
//         // { id: '5', position: { x: 800, y: 100 }, data: { label: 'Staging Area Subnet' }, type: 'group', style: { width: 300, height: 300, border: '1px solid #00ff00', padding: 10 } },
//         // { id: '6', position: { x: 850, y: 150 }, data: { label: (
//         //     <div>
//         //         Test/ Cutover App Server
//         //         <Handle type="source" position="right" />
//         //         <Handle type="target" position="left" />
//         //     </div>
//         // ) }, style: { border: '1px solid #0000ff', padding: 10 } },
//         // { id: '7', position: { x: 850, y: 250 }, data: { label: (
//         //     <div>
//         //         Test/ Cutover DB Server
//         //         <Handle type="source" position="right" />
//         //         <Handle type="target" position="left" />
//         //     </div>
//         // ) }, style: { border: '1px solid #0000ff', padding: 10 } },
//         // { id: '8', position: { x: 1150, y: 150 }, data: { label: (
//         //     <div>
//         //         EBS Volumes
//         //         <Handle type="source" position="right" />
//         //         <Handle type="target" position="left" />
//         //     </div>
//         // ) }, style: { border: '1px solid #ff00ff', padding: 10 } },
//         // { id: '9', position: { x: 1150, y: 250 }, data: { label: (
//         //     <div>
//         //         EBS Volumes
//         //         <Handle type="source" position="right" />
//         //         <Handle type="target" position="left" />
//         //     </div>
//         // ) }, style: { border: '1px solid #ff00ff', padding: 10 } }
//     ];

//     const initialEdges = [
//         { id: 'e1-2', source: '1', target: '2',  type: 'smoothstep',   markerEnd: { type: 'arrowclosed' }, markerStart: { type: 'arrowclosed' } },
//         // { id: 'e1-3', source: '1', target: '3', type: 'smoothstep',  markerEnd: { type: 'arrowclosed' }, markerStart: { type: 'arrowclosed' } },
//         // { id: 'e2-4', source: '2', target: '4', type: 'smoothstep', markerEnd: { type: 'arrowclosed' }, markerStart: { type: 'arrowclosed' } },
//         // { id: 'e3-4', source: '3', target: '4', type: 'smoothstep', markerEnd: { type: 'arrowclosed' }, markerStart: { type: 'arrowclosed' } },
//         // { id: 'e4-5', source: '4', target: '5', type: 'smoothstep', markerEnd: { type: 'arrowclosed' }, markerStart: { type: 'arrowclosed' } },
//         // { id: 'e5-6', source: '5', target: '6', type: 'smoothstep', markerEnd: { type: 'arrowclosed' }, markerStart: { type: 'arrowclosed' } },
//         // { id: 'e5-7', source: '5', target: '7', type: 'smoothstep', markerEnd: { type: 'arrowclosed' }, markerStart: { type: 'arrowclosed' } },
//         // { id: 'e6-8', source: '6', target: '8', type: 'smoothstep', markerEnd: { type: 'arrowclosed' }, markerStart: { type: 'arrowclosed' } },
//         // { id: 'e7-9', source: '7', target: '9', type: 'smoothstep', markerEnd: { type: 'arrowclosed' }, markerStart: { type: 'arrowclosed' } }
//     ];

//     // const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
//     // const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);

//     // const onConnect = useCallback(
//     //     (params) => setEdges((eds) => addEdge({ ...params, animated: true }, eds)),
//     //     [setEdges]
//     // );

//     return (
//         <div style={{ width: '100vw', height: '100vh' }}>
//             <ReactFlow
//                 nodes={initialNodes}
//                 edges={initialEdges}
//                 // onNodesChange={onNodesChange}
//                 // onEdgesChange={onEdgesChange}
//                 // onConnect={onConnect}
//             >
//                 <Controls />
//                 <MiniMap />
//                 <Background className={styles.bgColor}  variant="dots" gap={12} size={1} />
//             </ReactFlow>
//         </div>
//     );
// };

// export default ReactFlowComponent;